-j     JISコードを出力する。(デフォルト)

-e     EUCコードを出力する。

-s     シフトJISコードを出力する。

-w -w8[0] -w16[BL][0]  Unicode を出力する。

-w -w80     UTF8コードを出力する。（BOM無し）

-w8    UTF8コードを出力する。

-w16 -w16B0  UTF16コードを出力する。（Big Endian / BOM無し）

-w16B  UTF16コードを出力する。（Big Endian / BOM有り）

-w16L  UTF16コードを出力す る。 （Little  Endian / BOM有り）

-w16L0 UTF16コードを出力する。（Little Endian / BOM無し）

-m[BQSN0]     MIMEを解読する。(デフォルト)
ISO-2022-JP(base64)とISO-8859-1(Q encode) のみを解読する。ISO-8859-1 (Latin-1) を解読する時は、-lフラグも必要である。-m0 ではMIMEを解読しない。-mQ,-mBでは、Q encode, B encode されているものとして処理する。
 -mB  MIME base64 stream を解読する。ヘッダなどは取り除くこと。
 -mQ  MIME quoted stream を解読する。
 -mS  MIME のチェックを厳しくする (デフォルト)
 -mN  MIME のチェックを緩くする
 -m0  MIME を解読しない。
-mS は、宣言の内容と、その後に続くbase64の整合性 をチェックする。 -mN は、改行で切られたMIMEなども解読する。解読が止まらないこともある。

-M[BQ] MIME に変換する。JISにコード変換してからbase64される。
-M     ヘッダ形式に変換する
-MB    base64 stream に変換する
-MQ    Quoted stream に変換する

-J -E -S -X -B  期待される入力コードの性質を指定する。

-J     ISO-2022-JPを仮定する。

-E     日本語EUC(AT&T)を仮定する。

-S     MS漢字を仮定する。X0201仮名も仮定される。

-W     UTF-8を仮定する。

-W8    UTF-8を仮定する。

-W16   UTF-16(Little Endien)を仮定する。

-W16B  UTF-16(Big Endien)を仮定する。

-W16L  UTF-16(Little Endien)を仮定する。

-X     MS漢字中にX0201仮名があると仮定する。

-B     壊れた(Broken)JISコード。ESCがなくなったと仮定する。

      -B1    ESC-(, ESC-$ のあとのコードを問わない

      -B2    改行のあとに強制的にASCIIの戻す

-f?    一行?文字になるように簡単な整形をおこなう。デフォルトは60文字である。

-Z     X0208中の英数字と若干の記号をASCIIに変換する。-Z1はX0208間 隔をASCII spaceに変換する。-Z2はX0208間隔をASCII space 二つに変換する。趣味によって使い分けてほしい。

-b     バッファリング出力を行う。(デフォルト)

-u     出力時 に、バッファリングしない。 ssh localhost |nkf -u というように使う。

-t     何もしない。

-I     iso-2022-jp以外の漢字コードを〓に変換。

-i?    JIS漢字を指示するシーケンスとして ESC-'$'-?を使用する。 (デフォルトは、ESC-'$'-'B')

-o?    1バイト英数文字セットを指示するシーケンスとして、ESC-'('-?を使用する。(デフォルトは、ESC-'('-'B')

-r     ROT13/47の変換をする。

-g     自動判別の結果を出力します。

-v     バージョンを表示する。

-T     テキストモードで出力する。(MS-DOS上でのみ効力を持つ)

-l     0x80-0xfeのコードをISO-8859-1 (Latin-1)として扱う。JISコードアウトプットとの組合せのみ有効。 -s, -e,-xとは両立しない。

-x     通常おこなわれるX0201仮名->X0208の仮名変換をしないで、X0201仮名を保存する。入力は、MS-Kanjiの1byte仮名、SO/SI、ESC-(-I, SSOを受け付ける。出力は、日本語EUC中ではSSO、JISでは ESC-'('-I を使う。

-O     ファイルに出力する。Unixでは不要な機能だがWindowsやMSDOSでは必要らしい。直後の引き数でなく、 最後のファイル名が出力ファイル名となり上書きさ
れてしまうので注意。ファイル名がない場合は、nkf.out。

-c     NL前にCRを付加する。

-d     NL前のCRを削除する。単独のCRは、NLに置き換えられる。

-L[wmu]
改行モード
      -Lu    unix (LF)
      -Lw    windows (CRLF)
      -Lm    mac (CR)
デフォルトは変換なし。

-- 長い名前のオプション。
--ic=<input_codeset> --oc=<output_codeset>
     入力・出力の漢字コード系を指定します。
      ISO-2022-JP  JISコード。-jまたは-Jと同じ。
      EUC-JP  EUCコード。-eまたは-Eと同じ。
      eucJP-ascii  オープングループ日本ベンダ協議会が定義したeucJP-ascii。 -xが暗黙のうちに指定される。
      eucJP-ms  オープングループ日本ベンダ協議会が定義したeuc-JPms。-xが暗黙のうちに指定される。
      CP51932  Micorosft Code Page 51932。-xが暗黙のうちに指定される。
      Shift_JIS  シフトJIS。-sまたは-Sと同じ。CP932  Micorosft  Code Page 932。-xが暗黙のうちに指定される。
      UTF-8 UTF-8N  BOM無しのUTF-8。-wまたは-Wと同じ。

      UTF-8-BOM  BOM付きのUTF-8。-w8または-Wと同じ。

      UTF8-MAC  UTF8-MAC。互換分解されたひらがな・カタカナ等を結合します。

      UTF-16 UTF-16BE-BOM  BOM有りでBig Endian の UTF-16。-w16Bまたは-W16Bと同じ。
      UTF-16BE  BOM 無しでBig EndianのUTF-16。-w16B0または-W16Bと同じ。

      UTF-16LE-BOM  BOM有りで Little Endian の UTF-16。-w16Lまたは-W16Lと同じ。

      UTF-16LE  BOM無しでLittle Endian のUTF-16。-w16L0または-W16Lと同じ。

--fj,--unix,--mac,--msdos, --windows  これらのシステムに適した変換をします。

--jis,--euc,--sjis,--mime,--base64  対応する変換をします。

--hirakana, --katakana  平仮名、片仮名変換

--fb-{skip, html, xml, perl, java, subchar}
     Unicode  から Shift_JIS, EUC-JP, ISO-2022-JPに変換する際に、変換できなかった文字をどう扱うかを指定できます。

--prefix=escape character target character..
     EUC-JP から Shift_JIS への変換の際、2バイト目に現れた文字の前にエスケープ文字をつけることができます。引数の1文字目がエスケープ文字、2文字目以降にエスケープされるべき文字を指定します。

     例えば、--prefix= とすると、Shift_JISの2文字目に$,@ が来たら、その前に(スペース)が挿入されます
     --prefix=@@ とすると、Shift_JISの2文字目に@が来たら、その前に@が挿入されます

--no-cp932ext
     CP932において拡張された、NEC特殊文字、NEC選定IBM拡張文字(89～92区)、IBM拡張文字を変換しません。

--no-best-fit-chars
     Unicode からの変換の際に、往復安全性が確保されない文字の変換を行いません。UnicodeからUnicodeの変換の際に -x と共に指定すると、nkf を UTF形式の変換に用いることができます。（逆に言えば、これを指定しないと一部の文字が保存されません）
     パスに関わる文字列を変換する際には、このオプションを指定することを強く推奨します。

--cap-input, --url-input
     それぞれ ':','%' に続く16進数を文字に変換する

--numchar-input
     &#....; のような、Unicode文字参照を変換する

--in-place[=SUFFIX]  --overwrite[=SUFFIX]
     元のファイルを変換結果で置き換える。複数のファイルを書き換えることも可能。元のファイルのタイムスタンプとパーミッションが保持される。現在、作成日時やinodeは変更されるが、将来にわたってこの実装のままである保証は無い。

--guess
     自動判別の結果を出力する

--help

--version

--     これ以降のオプションを無視する

次の 2 つは、config.h で EXEC_IO を define してコンパイル
した時の み有効
--exec-in
     nkf [options] --exec-in cmd args... とやると、cmd の出力を nkf の入力とする

--exec-out
     nkf  [options] --exec-out cmd args... とやると、nkf の出力を cmd の入力とする